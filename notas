Un paquete: Es una carpeta que contiene módulos,
siempre posee el archivo __init__.py

El tipado tiene relación a los tipos de datos o datos primitivos entre los que tenemos strings, int, bool, arrays.
Hay cuatro clasificaciones de tipado:
  Tipado dinamico 
  Tipado estático 
  Tipado debil 
  Tipado fuerte 


Para realizar tipado estatico en Python puedo hacer
  Tipado para variables
    a: int = 5
    b: str = 'Hola'
    c: bool = True
  Tipado para listas
  Tipado para diccionarios
    from typing import Dict, List

    positives: List[int] = [1, 2, 3, 4, 5]
    users: Dict[str, int] = {

    }
  Tipado para funciones
    def suma(a: int, b: int)  -> int:   //Le indico que las variables de la función son enteros
                                        //y el resultado de la función debe arrojarme un entero

  El módulo mypy permite trabajar con tipos y mostrar los errores en consola
  por ejemplo, si lo ejecuto en el bash de la consola, podré ver de manera mucho
  más clara los errores de tipado que python mostraría de otra manera, se ejecuta así:

    mypy nombre_fichero.py --check-untyped-defs
    //se instala con pip install mypy y se ejecuta directamente desde la consola

Manejo de excepciones: (raise, try, except and finally)
  try-except: Intenta algo, sino realiza esta excepción. Se maneja muy similar que un condicional
  para uso de errores. Ej:


    def palindrome(string):
      return string == string[::-1]

    try:
      print(palindrome(1))
    except TypeError:
      print("Solo se puede ingresar strings")

  raise: se usa para manejar errores que python no ve como errores, como en el siguiente
  ejemplo buscando un palindromo si el usuario no ingresa nada, el programa va a tomar
  que se lee igual al derecho y al reves, pero no es lo que buscamos que resuelva, por
  lo tanto en caso de esa condición podemos poner el raise, para que cuando suceda lo 
  suba como error:

  def palindrome(string):
    try:
      if len(string) == 0:
        raise ValueError("No se puede ingresar una cadena vacía")
      return string == string[::-1]
    except ValueError as ve:
      print(ve)
      return False
      
  try:
    print(palindrome(""))
  except TypeError:
    print("Solo se puede ingresar strings")

  finally: se utiliza cuando se quiere realizar algo si hay o no un error, evitando
  errores o cierres abruptos, que pueden ser peligrosos, como en una base de datos
  en la que se podría perder la información. Ej:

  try:
    f = open("archivo.text")
    # hacer cualquier cosa con nuestro archivo
  finally:
    f.close()


Assert Stament: Un assert es una función de condición que en caso de no cumplirse
una condición específica lanza un mensaje de error en la ejecución del programa
indicando lo que se debe hacer. Ej:

  def make_repeater_of(n):
      def repeater(string):
          assert type(string) == str, "Solo puede utilizar cadenas"
          return string * n
      return repeater

Scope: alcance de las variables
  alcance global
  alcance local
 
Nested functions: Funciones anidadas, son funciones que están creadas dentro de otra función. Ej:
  
  def main():
    a = 1

    def nested():
      print(a)

    nested()

  main()
  
Closures: Es una técnica mediante la cuál los valores que están en valores superiores son recordados incluso
cuando la varialbe superior sea eliminada. Se utiliza normalmente en clases pequeñas para dar elegancia a los 
métodos y en decoradores. Ej:
  
  def main():
    a = 1

    def nested():
      print(a)

    return nested

  my_func = main()
  my_func()

  del(main)

  my_func()    // a pesar de haber borrado la varialbe main(), el contenido quedó guardado o respaldado en my_func() por lo tanto
               // al ejecutarla tengo como resultado el mismo valor que había en la función principal que se borró

  Reglas para encontrar un closure
    -Debemos tener una nested function
    -La nested function debe referenciar un valor de un scope superior
    -La función que envuelve a la nested function debe retornarla también

Decoradores: Es un closure especial que tiene la funcionalidad adicional, es una función que recibe como parámetro otra función, 
para añadirle cosas, y retornar una función diferente, por ejemplo:

//Tenemos el mismo ejemplo de decoradores, el primero envuelve la variable como siempre se ha hecho, el segundo usa el suggar sintax con @

def decorador(func):                                              |def decorador(func):
    def envoltura():                                              |    def envoltura():
        print('Esto se añade a mi función original')              |        print('Esto se añade a mi función original')
        func()                                                    |        func()
    return envoltura                                              |    return envoltura
                                                                  |
                                                                  |
def saludo():                                                     |@decorador
    print('¡Hola!')                                               |def saludo():
saludo = decorador(saludo)                                        |    print('¡Hola!')
                                                                  |
saludo()                                                          |Saludo()


La función swapping permite intercambiar valores entre variables de la siguiente forma:

    self.n1 = self.n2                    #Estas dos líneas corresponden
    self.n2 = self.aux                   #a los valores originales sin swapping

    self.n1, self.n2 = self.n2, self.aux #Ya tiene swapping
 

Iteradores: Es una estructura de datos para guardar datos infinitos
  Iterables: son aquellas estructuras de datos divisibles en elementos únicos que se pueden recorrer
  en un ciclo. Cuando hacemos un ciclo python no está recorriendo a ese iterable, lo que está 
  sucediendo de fondo es que ese iterable se debe convertir a un objeto especial llamado iterador.
  Estos iteradores si se pueden recorrer dentro del lenguaje. Lo que hace el lenguaje internamente
  es usar una estructura interna llamadad iter para hacer un cast a esos datos iterables, para 
  convertirlos en un iterador para se recorridos posteriormente, por ejemplo los ciclos for
  son un alias de la función que convierte los iterables en iteradores, en otras palabras, el 
  cliclo for es azucar sintactica (sugar sintax) de lo siguiente:

  # Creando un iterador

  my_list = [1,2,3,4,5]
  my_iter = iter(my_list)

  # Iterando un iterador

  while True:
      try:
          element = next(my_iter)
          print(element)
      except StopIteration:
          break

  # Cuando no quedan datos, la excepción StopIteraon es elevada
  
¿Cómo construllo un iterador? En el siguiente código tenemos un ejemplo

Class EvenNumbers:

    """Clase que implementa un iterador de todos los números pares, o los números pares
    hasta un máximo"" "

    def __init__(self, max=None):
        self.max = max

    def __iter__(self):
        self.num = 0
        return self

    def __next__(self):
        if not self.max or self.num <= self.max:
            result = self.num
            self.num += 2
            return result
        else:
            raise StopIteration


Generadores: Es un "Sugar syntax" de los iteradores. Los iteradores son clases, mientras
que los generadores son funciones, los generadores son funciones que guardan un estado,
se usa con la palabra clave "yield" que es equivalente a un return, pero a diferencia de
este que corta la función para devolver un valor y volver a comenzar desde el principio de
la función cuando esta es invocada, yield devuelve el valor, pero empieza desde el estado
en que finalizo, la función sigue guardando las variables de su scope local con los mismos
valores que tenía, como se puede ver en el siguiente ejemplo:

  def my_gen():
      """Un ejemplo de generadores"""

      print('Hello world!')
      n = 0
      yield n

      print('Hello heaven!')
      n = 1
      yield n

      print('Hello hell!')
      n = 2
      yield n

  a = my_gen()
  print(next(a)) #Hello world!
  print(next(a)) #Hello heaven!
  print(next(a)) #Hello hell!
  print(next(a)) StopIteration

  Generator expression: Es una forma resumida de un generador, y guarda la misma sintaxis de
  un list comprehension, y hace prácticamente lo mismo, con la ventaja que en cantidades muy
  grandes, no me va a recargar la memoria, sinó que va a generar unicamente los valores
  que está iterando en cada momento, y nó, todo el listado de elementos generados.

  my_list = [0,1,4,7,9,10]

  my_second_list = [x*2 for x in my_list]  #list comprehension
  my_second_gen = (x*2 for x in my_list)   #Generator expression
  
Set: Es una colección desordenada de elementos únicos e inmutables, para crear un set se declara
una variable con los elementos del set entre llaves, se diferencia de los diccionarios porque el
set no lleva el dos puntos característico de los diccionarios para separar las llaves de los elementos.

  my_set = {3, 4, 5}
  print("my_set =", my_set)      # my_set = {3,4,5}

  my_set2 = {"Hola", 23.3, False, True}
  print("my_set2 =", my_set2)   # my_set2 = {False, True, 'Hola', 23.3}

  my_set3 = {3, 3, 2}
  print("my_set3 =", my_set3)   # my_set3 = {2,3}    El tres que se repite lo sáca de manera automatica,
                                                     para poder construir el set con elementos únicos
  my_set4 = {[1, 2, 3], 4}
  print("my_set4 =", my_set4)   Traceback error # Nos saca un error porque no puede incluir
                                                  listas porque son un objeto que no es inmutable
  empty_set = {}
  print(type(empty_set))         # <class 'dict'>   En este caso se creó un diccionario vacio
  
  empty_set = set()
  print(type(empty_set))         # <class 'set'>    Esta es la forma de construir un set vacio
  

  Si se quiere convertir un set a otra estructura o viceversa:

  my_list = [1, 1, 2, 3, 4, 4 ,5]
  my_set = set(my_list)
  print(my_set)                   # {1, 2, 3, 4, 5}

  my_tuple = ("Hola", "Hola", "Hola", 1)
  my_set2 = set(my_tuple)
  print(my_set2)                  # {'Hola', 1}

  Para añadir elementos a un set:

  my_set = {1, 2, 3}              
  print(my_set)                   # {1, 2, 3}   imprime el set asignado a la variable my_set 
  my_set.add(4)
  print(my_set)                   # {1, 2, 3, 4}   ahora muestra un elemento agregado
  my_set.update([1, 2, 5])
  print(my_set)                   # {1, 2, 3, 4, 5}  se añaden multiples elementos y elimina los repetidos
  my_set.update((1, 7, 2), {6, 8})
  print(my_set)                   # {1, 2, 3, 4, 5, 6, 7, 8} igual al anterior, añade y elimina repetidos

  Para eliminar elementos a un set:

  my_set = {1, 2, 3, 4, 5, 6, 7}
  print(my_set)                   # {1, 2, 3, 4, 5, 6, 7}
  my_set.discrad(1)
  print(my_set)                   # {2, 3, 4, 5, 6, 7}
  my_set.remove(2)
  print(my_set)                   # {3, 4, 5, 6, 7}
  my_set.discard(10)
  print(my_set)                   # {3, 4, 5, 6, 7}
  my_set.remove(12)
  print(my_set)                   # Traceback (most recent call last):
                                      File "main.py", line 17, in <module>
                                        my_set.remove(12)
                                    KeyError:12

  my_set = {1, 2, 3, 4, 5, 6, 7}
  print(my_set)                   # {1, 2, 3, 4, 5, 6, 7}
  my_set.pop()
  print(my_set)                   # {2, 3, 4, 5, 6, 7} Borra un elemento aleatorio
  my_set.clear()
  print(my_set)                   # set()   Limpia el set
  
  OPERACIONES CON SETS:

  Unión:
  my_set1 = {3, 4, 5}
  my_set2 = {5, 6, 7}
  my_set3 = my_set1 | my_set2
  print(my_set3)                  # {3, 4, 5, 6, 7}

  Intersección:
  my_set1 = {3, 4, 5}
  my_set2 = {5, 6, 7}
  my_set3 = my_set1 & my_set2
  print(my_set3)                  # {5}

  Diferencia:
  my_set1 = {3, 4, 5}
  my_set2 = {5, 6, 7}
  my_set3 = my_set1 - my_set2
  print(my_set3)                  # {3, 4}
  my_set4 = my_set2 - my_set1
  print(my_set4)                  # {6, 7}

  Diferencia simétrica:
  my_set1 = {3, 4, 5}
  my_set2 = {5, 6, 7}
  my_set3 = my_set1 ^ my_set2
  print(my_set3)                  # {3, 4, 6, 7}

  
Datetime: el modulo datetime se puede importar directamente
  
  import datetime

  my_time = datetime.datetime.now()
  print(my_time)                  # 2020-04-30 17:58;38.988349   imprime la fecha y hora actual incluyendo segundo y milesimas
                                  # Este valor corresponde a lo máquina desde la que se trabaja, o si es un servidor a Universal Cordinator time    
  my_day = datetime.date.today()
  print(my_day)

  print(f'Year: {my_day.year}')
  print(f'Month: {my_day.month}')
  print(f'Day: {my_day.day}')

  FORMATEO DE FECHAS

  Tabla de códigos de formato resumida:

  %Y  Year
  %m  Month
  %d  Day
  %H  Hour
  %M  Minut
  %S  Second

  from datetime import datetime   # Cuando se importa así no se tiene que llamar a la clase y al módulo, sólo a la clase que contiene el métodoo

  my_datetime = datetime.now()
  print(my_datetime)

  my_str = my_datetime.strftime('%d/%m/%Y')
  print(f'Formato LATAM: {my_str}')

  my_str = my_datetime.strftime('%m/%d/%Y')
  print(f'Formato USA: {my_str}')

  my_str = my_datetime.strftime('Estamos en el año %Y')
  print(f'Formato Random: {my_str}')

Garbage Collector: Es una parte del motor de Python que se encarga de borrar las variables u objetos que ya no se usan
